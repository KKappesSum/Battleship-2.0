c817l905@cycle3:~/eecs448/p2-repo$ valgrind --leak-check=full ./Battleship
==12142== Memcheck, a memory error detector
==12142== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==12142== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==12142== Command: ./Battleship
==12142==


  ____        _   _   _           _     _
 |  _ \      | | | | | |         | |   (_)
 | |_) | __ _| |_| |_| | ___  ___| |__  _ _ __
 |  _ < / _` | __| __| |/ _ \/ __| '_ \| | '_ \
 | |_) | (_| | |_| |_| |  __/\__ \ | | | | |_) |
 |____/ \__,_|\__|\__|_|\___||___/_| |_|_| .__/
                                         | |
                                         |_|

Menu:
 1) Instructions
 2) Start Game: Player vs. Player
 3) Start Game: Player vs. AI
 4) Quit Game
 5) Resume Saved Game

Enter option (1-5): 3
Starting a Player vs. AI game!
Choose a difficulty level for the AI.
1) Easy
2) Medium
3) Hard
Your choice: 1

How many ships would you like to play with? (1-5 ships): 1

Player 1: It's time to place your ships.

        A       B       C       D       E       F       G       H
1       ~       ~       ~       ~       ~       ~       ~       ~
2       ~       ~       ~       ~       ~       ~       ~       ~
3       ~       ~       ~       ~       ~       ~       ~       ~
4       ~       ~       ~       ~       ~       ~       ~       ~
5       ~       ~       ~       ~       ~       ~       ~       ~
6       ~       ~       ~       ~       ~       ~       ~       ~
7       ~       ~       ~       ~       ~       ~       ~       ~
8       ~       ~       ~       ~       ~       ~       ~       ~

        A       B       C       D       E       F       G       H
1       ~       ~       ~       ~       ~       ~       ~       ~
2       ~       ~       ~       ~       ~       ~       ~       ~
3       ~       ~       ~       ~       ~       ~       ~       ~
4       ~       ~       ~       ~       ~       ~       ~       ~
5       ~       ~       ~       ~       ~       ~       ~       ~
6       ~       ~       ~       ~       ~       ~       ~       ~
7       ~       ~       ~       ~       ~       ~       ~       ~
8       ~       ~       ~       ~       ~       ~       ~       ~

It's time to place your ship of size 1x1. Enter a starting coordinate
Please enter a coordinate in the form 1A: 1A
        A       B       C       D       E       F       G       H
1       1       ~       ~       ~       ~       ~       ~       ~
2       ~       ~       ~       ~       ~       ~       ~       ~
3       ~       ~       ~       ~       ~       ~       ~       ~
4       ~       ~       ~       ~       ~       ~       ~       ~
5       ~       ~       ~       ~       ~       ~       ~       ~
6       ~       ~       ~       ~       ~       ~       ~       ~
7       ~       ~       ~       ~       ~       ~       ~       ~
8       ~       ~       ~       ~       ~       ~       ~       ~

        A       B       C       D       E       F       G       H
1       1       ~       ~       ~       ~       ~       ~       ~
2       ~       ~       ~       ~       ~       ~       ~       ~
3       ~       ~       ~       ~       ~       ~       ~       ~
4       ~       ~       ~       ~       ~       ~       ~       ~
5       ~       ~       ~       ~       ~       ~       ~       ~
6       ~       ~       ~       ~       ~       ~       ~       ~
7       ~       ~       ~       ~       ~       ~       ~       ~
8       ~       ~       ~       ~       ~       ~       ~       ~

==12142== Conditional jump or move depends on uninitialised value(s)
==12142==    at 0x4F60B55: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==12142==    by 0x4F60F18: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==12142==    by 0x113BA4: Grid::setCoor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (Grid.cpp:24)
==12142==    by 0x113ECB: Grid::readShip(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, int) (Grid.cpp:52)
==12142==    by 0x111D5A: Admiral::addShip(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*) (Admiral.cpp:65)
==12142==    by 0x10DF46: Executive::placeShip(int, Admiral*, bool) (Executive.cpp:479)
==12142==    by 0x11018A: Executive::setupGame(bool) (Executive.cpp:948)
==12142==    by 0x10E7BA: Executive::run() (Executive.cpp:535)
==12142==    by 0x10B22B: main (main.cpp:23)
==12142==
==12142== Use of uninitialised value of size 8
==12142==    at 0x4F60C03: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==12142==    by 0x4F60F18: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==12142==    by 0x113BA4: Grid::setCoor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (Grid.cpp:24)
==12142==    by 0x113ECB: Grid::readShip(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, int) (Grid.cpp:52)
==12142==    by 0x111D5A: Admiral::addShip(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*) (Admiral.cpp:65)
==12142==    by 0x10DF46: Executive::placeShip(int, Admiral*, bool) (Executive.cpp:479)
==12142==    by 0x11018A: Executive::setupGame(bool) (Executive.cpp:948)
==12142==    by 0x10E7BA: Executive::run() (Executive.cpp:535)
==12142==    by 0x10B22B: main (main.cpp:23)
==12142==
==12142== Invalid write of size 1
==12142==    at 0x4F60C03: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==12142==    by 0x4F60F18: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==12142==    by 0x113BA4: Grid::setCoor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (Grid.cpp:24)
==12142==    by 0x113ECB: Grid::readShip(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, int) (Grid.cpp:52)
==12142==    by 0x111D5A: Admiral::addShip(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*) (Admiral.cpp:65)
==12142==    by 0x10DF46: Executive::placeShip(int, Admiral*, bool) (Executive.cpp:479)
==12142==    by 0x11018A: Executive::setupGame(bool) (Executive.cpp:948)
==12142==    by 0x10E7BA: Executive::run() (Executive.cpp:535)
==12142==    by 0x10B22B: main (main.cpp:23)
==12142==  Address 0x7e is not stack'd, malloc'd or (recently) free'd
==12142==
==12142==
==12142== Process terminating with default action of signal 11 (SIGSEGV)
==12142==  Access not within mapped region at address 0x7E
==12142==    at 0x4F60C03: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==12142==    by 0x4F60F18: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==12142==    by 0x113BA4: Grid::setCoor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (Grid.cpp:24)
==12142==    by 0x113ECB: Grid::readShip(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, int) (Grid.cpp:52)
==12142==    by 0x111D5A: Admiral::addShip(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*) (Admiral.cpp:65)
==12142==    by 0x10DF46: Executive::placeShip(int, Admiral*, bool) (Executive.cpp:479)
==12142==    by 0x11018A: Executive::setupGame(bool) (Executive.cpp:948)
==12142==    by 0x10E7BA: Executive::run() (Executive.cpp:535)
==12142==    by 0x10B22B: main (main.cpp:23)
==12142==  If you believe this happened as a result of a stack
==12142==  overflow in your program's main thread (unlikely but
==12142==  possible), you can try to increase the size of the
==12142==  main thread stack using the --main-stacksize= flag.
==12142==  The main thread stack size used in this run was 8388608.
==12142==
==12142== HEAP SUMMARY:
==12142==     in use at exit: 4,720 bytes in 27 blocks
==12142==   total heap usage: 31 allocs, 4 frees, 79,512 bytes allocated
==12142==
==12142== LEAK SUMMARY:
==12142==    definitely lost: 0 bytes in 0 blocks
==12142==    indirectly lost: 0 bytes in 0 blocks
==12142==      possibly lost: 0 bytes in 0 blocks
==12142==    still reachable: 4,720 bytes in 27 blocks
==12142==                       of which reachable via heuristic:
==12142==                         newarray           : 4,304 bytes in 18 blocks
==12142==         suppressed: 0 bytes in 0 blocks
==12142== Reachable blocks (those to which a pointer was found) are not shown.
==12142== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==12142==
==12142== For counts of detected and suppressed errors, rerun with: -v
==12142== Use --track-origins=yes to see where uninitialised values come from
==12142== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)